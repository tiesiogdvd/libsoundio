name: Build Static Libraries

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew update
        brew install cmake ninja
    
    - name: Configure CMake
      run: |
        mkdir build-${{ matrix.arch }}
        cd build-${{ matrix.arch }}
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_EXAMPLE_PROGRAMS=OFF \
          -DBUILD_TESTS=OFF \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 \
          -DCMAKE_INSTALL_PREFIX=install \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    
    - name: Build
      run: |
        cd build-${{ matrix.arch }}
        ninja
        ninja install
    
    - name: Package artifacts
      run: |
        cd build-${{ matrix.arch }}/install
        tar -czf ../../libsoundio-macos-${{ matrix.arch }}.tar.gz .
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-macos-${{ matrix.arch }}
        path: libsoundio-macos-${{ matrix.arch }}.tar.gz

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
        - arch: x64
          cmake_arch: x64
        - arch: x86
          cmake_arch: Win32
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
    
    - name: Configure CMake
      run: |
        mkdir build-${{ matrix.arch }}
        cd build-${{ matrix.arch }}
        cmake .. `
          -A ${{ matrix.cmake_arch }} `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_SHARED_LIBS=OFF `
          -DBUILD_EXAMPLE_PROGRAMS=OFF `
          -DBUILD_TESTS=OFF `
          -DCMAKE_INSTALL_PREFIX=install `
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded `
          -DCMAKE_POLICY_DEFAULT_CMP0091=NEW `
          -DCMAKE_C_STANDARD=11 `
          -DCMAKE_C_STANDARD_REQUIRED=ON `
          -DCMAKE_C_FLAGS="/std:c11 /experimental:c11atomics /MT" `
          -DCMAKE_C_FLAGS_RELEASE="/std:c11 /experimental:c11atomics /MT /O2 /Ob2 /DNDEBUG" `
          -DCMAKE_CXX_FLAGS="/std:c++11 /experimental:c11atomics /MT" `
          -DCMAKE_CXX_FLAGS_RELEASE="/std:c++11 /experimental:c11atomics /MT /O2 /Ob2 /DNDEBUG"
    
    - name: Build
      run: |
        cd build-${{ matrix.arch }}
        cmake --build . --config Release --parallel --verbose
    
    - name: Manual install (skip DLL)
      run: |
        cd build-${{ matrix.arch }}
        
        # Create install directories
        New-Item -ItemType Directory -Force -Path "install/lib"
        New-Item -ItemType Directory -Force -Path "install/include"
        
        # Copy static library
        Copy-Item "Release/soundio.lib" -Destination "install/lib/" -ErrorAction SilentlyContinue
        Copy-Item "Release/libsoundio_static.lib" -Destination "install/lib/" -ErrorAction SilentlyContinue
        Copy-Item "soundio.lib" -Destination "install/lib/" -ErrorAction SilentlyContinue
        Copy-Item "libsoundio_static.lib" -Destination "install/lib/" -ErrorAction SilentlyContinue
        
        # Copy headers
        Copy-Item "../soundio/*.h" -Destination "install/include/" -Recurse -Force
        
        # List what we have
        Get-ChildItem "install" -Recurse
    
    - name: Verify static library
      run: |
        cd build-${{ matrix.arch }}/install
        Write-Host "=== Library files ==="
        Get-ChildItem -Recurse -Filter "*.lib"
        Write-Host "=== DLL files (should be none) ==="
        Get-ChildItem -Recurse -Filter "*.dll" -ErrorAction SilentlyContinue
    
    - name: Package artifacts
      run: |
        cd build-${{ matrix.arch }}/install
        7z a ../../libsoundio-windows-${{ matrix.arch }}.zip *
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-windows-${{ matrix.arch }}
        path: libsoundio-windows-${{ matrix.arch }}.zip

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        include:
        - arch: x86_64
          cc: gcc
          cxx: g++
          cmake_system_processor: x86_64
        - arch: aarch64
          cc: aarch64-linux-gnu-gcc
          cxx: aarch64-linux-gnu-g++
          cmake_system_processor: aarch64
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          libasound2-dev \
          libpulse-dev \
          libjack-jackd2-dev \
          pkg-config
        
        # Install cross-compilation tools for aarch64
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross
        fi
    
    - name: Configure CMake
      run: |
        mkdir build-${{ matrix.arch }}
        cd build-${{ matrix.arch }}
        
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          # Cross-compilation for aarch64
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.cmake_system_processor }} \
            -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_C_STANDARD=11
        else
          # Native x86_64 build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_C_STANDARD=11
        fi
    
    - name: Build
      run: |
        cd build-${{ matrix.arch }}
        ninja
        ninja install
    
    - name: Verify static library
      run: |
        cd build-${{ matrix.arch }}/install
        echo "=== Static libraries ==="
        find . -name "*.a" -ls
        echo "=== Shared libraries (should be none) ==="
        find . -name "*.so*" -ls || echo "Good - no shared libraries found"
    
    - name: Package artifacts
      run: |
        cd build-${{ matrix.arch }}/install
        tar -czf ../../libsoundio-linux-${{ matrix.arch }}.tar.gz .
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-linux-${{ matrix.arch }}
        path: libsoundio-linux-${{ matrix.arch }}.tar.gz

  create-release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: List artifacts
      run: |
        find artifacts -type f -name "*.tar.gz" -o -name "*.zip" | sort
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
