name: Build Static libsoundio

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        toolchain: [msvc, mingw]
        arch: [x64, x86]
        include:
        - toolchain: msvc
          arch: x64
          cmake_arch: x64
        - toolchain: msvc
          arch: x86
          cmake_arch: Win32
        - toolchain: mingw
          arch: x64
          mingw_arch: x86_64
        - toolchain: mingw
          arch: x86
          mingw_arch: i686
        exclude:
        - toolchain: mingw
          arch: x86  # Skip 32-bit MinGW for simplicity
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master

    - name: Fix CMake version and WASAPI
      run: |
        # Fix CMake version
        (Get-Content CMakeLists.txt) -replace 'cmake_minimum_required\(VERSION 2\.8\.5\)', 'cmake_minimum_required(VERSION 3.15)' | Set-Content CMakeLists.txt
        
        # Fix WASAPI GUID redefinitions by commenting them out
        $wasapi = Get-Content src/wasapi.c
        $wasapi = $wasapi -replace '^static const CLSID CLSID_MMDeviceEnumerator.*', '// $&'
        $wasapi = $wasapi -replace '^static const IID\s+IID_.*', '// $&'
        $wasapi = $wasapi -replace '^\s*0x[0-9a-fA-F,x\s{}]+;$', '// $&'
        $wasapi | Set-Content src/wasapi.c

    - name: Setup MinGW
      if: matrix.toolchain == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-${{ matrix.mingw_arch }}-toolchain
          mingw-w64-${{ matrix.mingw_arch }}-cmake

    - name: Build MSVC
      if: matrix.toolchain == 'msvc'
      run: |
        mkdir build
        cd build
        cmake .. -A ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON -DBUILD_DYNAMIC_LIBS=OFF -DBUILD_EXAMPLE_PROGRAMS=OFF -DBUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=install -DCMAKE_C_FLAGS="/std:c11 /experimental:c11atomics"
        cmake --build . --config Release
        New-Item -ItemType Directory -Force -Path "install/lib"
        New-Item -ItemType Directory -Force -Path "install/include"
        Copy-Item "Release/soundio.lib" -Destination "install/lib/" -ErrorAction SilentlyContinue
        Copy-Item "../soundio/*.h" -Destination "install/include/" -Recurse -Force

    - name: Build MinGW
      if: matrix.toolchain == 'mingw'
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON -DBUILD_DYNAMIC_LIBS=OFF -DBUILD_EXAMPLE_PROGRAMS=OFF -DBUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=install
        ninja
        ninja install

    - name: Package
      run: |
        cd build/install
        7z a ../../libsoundio-windows-${{ matrix.arch }}-${{ matrix.toolchain }}.zip *

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-windows-${{ matrix.arch }}-${{ matrix.toolchain }}
        path: libsoundio-windows-${{ matrix.arch }}-${{ matrix.toolchain }}.zip

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master

    - name: Fix CMake version
      run: |
        sed -i 's/cmake_minimum_required(VERSION 2\.8\.5)/cmake_minimum_required(VERSION 3.15)/' CMakeLists.txt

    - name: Install deps
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libasound2-dev libpulse-dev libjack-jackd2-dev
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi

    - name: Configure and Build
      run: |
        mkdir build
        cd build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON -DBUILD_DYNAMIC_LIBS=OFF -DBUILD_EXAMPLE_PROGRAMS=OFF -DBUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=install -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON -DBUILD_DYNAMIC_LIBS=OFF -DBUILD_EXAMPLE_PROGRAMS=OFF -DBUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=install
        fi
        make -j$(nproc)
        make install

    - name: Package
      run: |
        cd build/install
        tar -czf ../../libsoundio-linux-${{ matrix.arch }}.tar.gz .

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-linux-${{ matrix.arch }}
        path: libsoundio-linux-${{ matrix.arch }}.tar.gz

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master

    - name: Fix CMake version
      run: |
        sed -i '' 's/cmake_minimum_required(VERSION 2\.8\.5)/cmake_minimum_required(VERSION 3.15)/' CMakeLists.txt

    - name: Configure and Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON -DBUILD_DYNAMIC_LIBS=OFF -DBUILD_EXAMPLE_PROGRAMS=OFF -DBUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=install -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Package
      run: |
        cd build/install
        tar -czf ../../libsoundio-macos-${{ matrix.arch }}.tar.gz .

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-macos-${{ matrix.arch }}
        path: libsoundio-macos-${{ matrix.arch }}.tar.gz
