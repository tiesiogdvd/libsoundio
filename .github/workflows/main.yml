name: Build libsoundio Static Libraries for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows-static:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        compiler: [msvc, mingw]
        include:
          - arch: x64
            cmake_arch: x64
            mingw_arch: x86_64
          - arch: x86
            cmake_arch: Win32
            mingw_arch: i686
      fail-fast: false  # Don't cancel other jobs if one fails

    steps:
    - name: Checkout libsoundio
      uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master

    - name: Set up MSVC
      if: matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.3

    - name: Set up MinGW
      if: matrix.compiler == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-${{ matrix.mingw_arch }}-gcc
          mingw-w64-${{ matrix.mingw_arch }}-cmake
          mingw-w64-${{ matrix.mingw_arch }}-make

    - name: Configure CMake (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.cmake_arch }} `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_STATIC_LIBS=ON `
          -DBUILD_DYNAMIC_LIBS=OFF `
          -DBUILD_EXAMPLE_PROGRAMS=OFF `
          -DBUILD_TESTS=OFF `
          -DENABLE_WASAPI=ON

    - name: Configure CMake (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_STATIC_LIBS=ON \
          -DBUILD_DYNAMIC_LIBS=OFF \
          -DBUILD_EXAMPLE_PROGRAMS=OFF \
          -DBUILD_TESTS=OFF \
          -DENABLE_WASAPI=ON

    - name: Build (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        cd build
        cmake --build . --config Release --target libsoundio_static

    - name: Build (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        cd build
        make libsoundio_static -j$(nproc)

    - name: Prepare artifacts (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        mkdir artifacts
        # Copy static library
        copy build\Release\libsoundio_static.lib artifacts\libsoundio_static_${{ matrix.arch }}_msvc.lib
        # Copy headers
        mkdir artifacts\include
        copy soundio\*.h artifacts\include\

    - name: Prepare artifacts (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        mkdir artifacts
        # Copy static library (check both possible locations)
        if [ -f build/liblibsoundio_static.a ]; then
          cp build/liblibsoundio_static.a artifacts/libsoundio_static_${{ matrix.arch }}_mingw.a
        elif [ -f build/libsoundio_static.a ]; then
          cp build/libsoundio_static.a artifacts/libsoundio_static_${{ matrix.arch }}_mingw.a
        else
          echo "Static library not found!"
          ls -la build/
          exit 1
        fi
        # Copy headers
        mkdir artifacts/include
        cp soundio/*.h artifacts/include/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-${{ matrix.compiler }}-${{ matrix.arch }}
        path: artifacts/

  combine-artifacts:
    needs: build-windows-static
    runs-on: ubuntu-latest
    if: always() && (needs.build-windows-static.result == 'success' || needs.build-windows-static.result == 'failure')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find all-artifacts -type f -name "*" | sort

    - name: Combine artifacts
      run: |
        mkdir -p combined/lib
        mkdir -p combined/include
        
        # Copy all static libraries
        find all-artifacts -name "*.lib" -exec cp {} combined/lib/ \; 2>/dev/null || true
        find all-artifacts -name "*.a" -exec cp {} combined/lib/ \; 2>/dev/null || true
        
        # Copy headers (from any artifact, they're the same)
        find all-artifacts -name "*.h" -exec cp {} combined/include/ \; 2>/dev/null || true
        
        # List what we have
        echo "Combined artifacts:"
        find combined -type f | sort
        
        # Create a comprehensive README
        cat > combined/README.md << 'EOF'
        # libsoundio Static Libraries for Windows
        
        This package contains static libraries for libsoundio compiled for Windows.
        
        ## Files included:
        - `lib/libsoundio_static_x64_msvc.lib` - 64-bit MSVC static library
        - `lib/libsoundio_static_x86_msvc.lib` - 32-bit MSVC static library  
        - `lib/libsoundio_static_x64_mingw.a` - 64-bit MinGW static library
        - `lib/libsoundio_static_x86_mingw.a` - 32-bit MinGW static library
        - `include/` - Header files
        
        ## Usage:
        1. **Define SOUNDIO_STATIC_LIBRARY**: This is crucial for static linking
        2. Link against the appropriate static library for your compiler and architecture
        3. Include the headers from the `include/` directory
        4. On Windows, no additional libraries are needed as WASAPI is built into Windows
        
        ## Example compilation:
        ```bash
        # With MSVC
        cl /DSOUNDIO_STATIC_LIBRARY your_app.c libsoundio_static_x64_msvc.lib
        
        # With MinGW
        gcc -DSOUNDIO_STATIC_LIBRARY your_app.c -L. -lsoundio_static_x64_mingw
        ```
        
        ## CMake Example:
        ```cmake
        # Add libsoundio headers
        target_include_directories(your_app PRIVATE path/to/libsoundio/include)
        
        # Define static library usage
        target_compile_definitions(your_app PRIVATE SOUNDIO_STATIC_LIBRARY)
        
        # Link static library
        if(MSVC)
            target_link_libraries(your_app path/to/libsoundio_static_x64_msvc.lib)
        else()
            target_link_libraries(your_app path/to/libsoundio_static_x64_mingw.a)
        endif()
        ```
        
        ## Important Notes:
        - **Always define SOUNDIO_STATIC_LIBRARY** when using static libraries
        - libsoundio uses WASAPI backend on Windows (built into Windows)
        - No external audio library dependencies required
        - Choose the correct architecture (x86/x64) for your application
        EOF

    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-windows-all
        path: combined/
