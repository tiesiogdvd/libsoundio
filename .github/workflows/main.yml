name: Build libsoundio Static Libraries

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libasound2-dev libpulse-dev libjack-jackd2-dev
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
    
    - name: Configure CMake
      run: |
        mkdir build && cd build
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64
        else
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF
        fi
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Create single static library
      run: |
        cd build
        # Extract all object files from the static library
        mkdir temp_extract
        cd temp_extract
        ar x ../libsoundio_static.a
        # Create new archive with all objects
        ar rcs ../libsoundio-linux-${{ matrix.arch }}.a *.o
        cd ..
        rm -rf temp_extract
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-linux-${{ matrix.arch }}
        path: build/libsoundio-linux-${{ matrix.arch }}.a

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master
    
    - name: Install dependencies
      run: |
        brew install cmake
    
    - name: Configure CMake
      run: |
        mkdir build && cd build
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0
        else
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
        fi
    
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
    
    - name: Create single static library
      run: |
        cd build
        # For macOS, we can use libtool to create a single archive
        mkdir temp_extract
        cd temp_extract
        ar x ../libsoundio_static.a
        libtool -static -o ../libsoundio-macos-${{ matrix.arch }}.a *.o
        cd ..
        rm -rf temp_extract
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-macos-${{ matrix.arch }}
        path: build/libsoundio-macos-${{ matrix.arch }}.a

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        if ("${{ matrix.arch }}" -eq "x86") {
          cmake .. `
            -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_DYNAMIC_LIBS=OFF `
            -DBUILD_STATIC_LIBS=ON `
            -DBUILD_EXAMPLE_PROGRAMS=OFF `
            -DBUILD_TESTS=OFF `
            -DCMAKE_C_FLAGS="/TP" `
            -DCMAKE_CXX_FLAGS="/TP"
        } else {
          cmake .. `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_DYNAMIC_LIBS=OFF `
            -DBUILD_STATIC_LIBS=ON `
            -DBUILD_EXAMPLE_PROGRAMS=OFF `
            -DBUILD_TESTS=OFF `
            -DCMAKE_C_FLAGS="/TP" `
            -DCMAKE_CXX_FLAGS="/TP"
        }
    
    - name: Build
      run: |
        cd build
        msbuild libsoundio.sln /p:Configuration=Release /p:Platform=${{ matrix.arch == 'x86' && 'Win32' || 'x64' }} /m
    
    - name: Create single static library
      run: |
        cd build
        # For Windows, rename the output to .a format for consistency
        if ("${{ matrix.arch }}" -eq "x86") {
          copy "Release\soundio_static.lib" "libsoundio-windows-x86.a"
        } else {
          copy "Release\soundio_static.lib" "libsoundio-windows-x64.a"
        }
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-windows-${{ matrix.arch }}
        path: build/libsoundio-windows-${{ matrix.arch }}.a

  package-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release package
      run: |
        mkdir release
        find artifacts -name "*.a" -exec cp {} release/ \;
        ls -la release/
        
        # Create a simple header package
        curl -L https://raw.githubusercontent.com/andrewrk/libsoundio/master/soundio/soundio.h \
          -o release/soundio.h
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-all-platforms
        path: release/
