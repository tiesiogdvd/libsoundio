name: Build libsoundio Static Libraries for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows-static:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        compiler: [msvc, mingw]
        include:
          - arch: x64
            cmake_arch: x64
            mingw_arch: x86_64
          - arch: x86
            cmake_arch: Win32
            mingw_arch: i686

    steps:
    - name: Checkout libsoundio
      uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master

    - name: Set up MSVC
      if: matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.3

    - name: Set up MinGW
      if: matrix.compiler == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-${{ matrix.mingw_arch }}-gcc
          mingw-w64-${{ matrix.mingw_arch }}-cmake
          mingw-w64-${{ matrix.mingw_arch }}-make

    - name: Configure CMake (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.cmake_arch }} `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_STATIC_LIBS=ON `
          -DBUILD_SHARED_LIBS=OFF `
          -DBUILD_EXAMPLE_PROGRAMS=OFF `
          -DBUILD_TESTS=OFF `
          -DENABLE_WASAPI=ON `
          -DSOUNDIO_STATIC_LIBNAME=soundio_static

    - name: Configure CMake (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_STATIC_LIBS=ON \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_EXAMPLE_PROGRAMS=OFF \
          -DBUILD_TESTS=OFF \
          -DENABLE_WASAPI=ON \
          -DSOUNDIO_STATIC_LIBNAME=soundio_static \
          -DCMAKE_C_FLAGS="-DSOUNDIO_STATIC_LIBRARY"

    - name: Build (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        cd build
        cmake --build . --config Release --target soundio_static

    - name: Build (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        cd build
        make soundio_static -j$(nproc)

    - name: Prepare artifacts (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        mkdir artifacts
        # Copy static library
        copy build\Release\soundio_static.lib artifacts\libsoundio_static_${{ matrix.arch }}_msvc.lib
        # Copy headers
        mkdir artifacts\include
        copy soundio\*.h artifacts\include\

    - name: Prepare artifacts (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        mkdir artifacts
        # Copy static library
        cp build/libsoundio_static.a artifacts/libsoundio_static_${{ matrix.arch }}_mingw.a
        # Copy headers
        mkdir artifacts/include
        cp soundio/*.h artifacts/include/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-${{ matrix.compiler }}-${{ matrix.arch }}
        path: artifacts/

  combine-artifacts:
    needs: build-windows-static
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Combine artifacts
      run: |
        mkdir -p combined/lib
        mkdir -p combined/include
        
        # Copy all static libraries
        find all-artifacts -name "*.lib" -exec cp {} combined/lib/ \;
        find all-artifacts -name "*.a" -exec cp {} combined/lib/ \;
        
        # Copy headers (from any artifact, they're the same)
        find all-artifacts -name "*.h" -exec cp {} combined/include/ \; | head -10
        
        # Create a simple README
        cat > combined/README.md << 'EOF'
        # libsoundio Static Libraries for Windows
        
        This package contains static libraries for libsoundio compiled for Windows.
        
        ## Files included:
        - `lib/libsoundio_static_x64_msvc.lib` - 64-bit MSVC static library
        - `lib/libsoundio_static_x86_msvc.lib` - 32-bit MSVC static library  
        - `lib/libsoundio_static_x64_mingw.a` - 64-bit MinGW static library
        - `lib/libsoundio_static_x86_mingw.a` - 32-bit MinGW static library
        - `include/` - Header files
        
        ## Usage:
        1. Link against the appropriate static library for your compiler and architecture
        2. Define `SOUNDIO_STATIC_LIBRARY` when compiling your application
        3. Include the headers from the `include/` directory
        4. On Windows, no additional libraries are needed as WASAPI is built into Windows
        
        ## Example compilation:
        ```bash
        # With MSVC
        cl /DSOUNDIO_STATIC_LIBRARY your_app.c libsoundio_static_x64_msvc.lib
        
        # With MinGW
        gcc -DSOUNDIO_STATIC_LIBRARY your_app.c -L. -lsoundio_static_x64_mingw
        ```
        EOF

    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-windows-all
        path: combined/
