name: Build libsoundio Static Libraries for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows-static:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        compiler: [msvc, mingw]
        include:
          - arch: x64
            cmake_arch: x64
            mingw_arch: x86_64
            mingw_package: mingw-w64-x86_64
          - arch: x86
            cmake_arch: Win32
            mingw_arch: i686
            mingw_package: mingw-w64-i686
      fail-fast: false

    steps:
    - name: Checkout libsoundio
      uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master

    - name: Set up MSVC
      if: matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.3

    - name: Set up MinGW
      if: matrix.compiler == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          ${{ matrix.mingw_package }}-gcc
          ${{ matrix.mingw_package }}-cmake
          make

    # Fix CMake compatibility and add C11 support
    - name: Patch CMakeLists.txt for modern CMake and C11
      run: |
        # Backup original
        copy CMakeLists.txt CMakeLists.txt.bak
        # Read the file and apply multiple fixes
        $content = Get-Content CMakeLists.txt -Raw
        # Fix CMake version
        $content = $content -replace 'cmake_minimum_required\(VERSION 2\.8\.5\)', 'cmake_minimum_required(VERSION 3.5)'
        # Add C11 standard after project declaration
        $content = $content -replace '(project\(libsoundio C\))', "`$1`nset(CMAKE_C_STANDARD 11)`nset(CMAKE_C_STANDARD_REQUIRED ON)"
        # Write back
        Set-Content CMakeLists.txt $content

    - name: Configure CMake (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.cmake_arch }} `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_STATIC_LIBS=ON `
          -DBUILD_DYNAMIC_LIBS=OFF `
          -DBUILD_EXAMPLE_PROGRAMS=OFF `
          -DBUILD_TESTS=OFF `
          -DENABLE_WASAPI=ON `
          -DCMAKE_C_STANDARD=11 `
          -DCMAKE_C_STANDARD_REQUIRED=ON `
          -DCMAKE_POLICY_DEFAULT_CMP0025=NEW `
          -DCMAKE_POLICY_DEFAULT_CMP0042=NEW `
          -DCMAKE_POLICY_DEFAULT_CMP0046=NEW

    - name: Configure CMake (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_STATIC_LIBS=ON \
          -DBUILD_DYNAMIC_LIBS=OFF \
          -DBUILD_EXAMPLE_PROGRAMS=OFF \
          -DBUILD_TESTS=OFF \
          -DENABLE_WASAPI=ON \
          -DCMAKE_C_STANDARD=11 \
          -DCMAKE_C_STANDARD_REQUIRED=ON \
          -DCMAKE_POLICY_DEFAULT_CMP0025=NEW \
          -DCMAKE_POLICY_DEFAULT_CMP0042=NEW \
          -DCMAKE_POLICY_DEFAULT_CMP0046=NEW

    - name: Build (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        cd build
        cmake --build . --config Release --target libsoundio_static

    - name: Build (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        cd build
        make libsoundio_static -j$(nproc)

    - name: Verify build output (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        echo "Checking build output..."
        Get-ChildItem -Recurse build/ -Name "*.lib"
        Get-ChildItem -Recurse build/ -Name "*.dll"

    - name: Verify build output (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        echo "Checking build output..."
        find build/ -name "*.a"
        find build/ -name "*.dll"

    - name: Prepare artifacts (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        mkdir artifacts
        # Find and copy the static library
        $staticLib = Get-ChildItem -Recurse build/ -Name "*soundio_static*.lib" | Select-Object -First 1
        if ($staticLib) {
          copy "build\$staticLib" "artifacts\libsoundio_static_${{ matrix.arch }}_msvc.lib"
        } else {
          echo "Static library not found!"
          Get-ChildItem -Recurse build/ -Name "*.lib"
          exit 1
        }
        # Copy headers
        mkdir artifacts\include
        copy soundio\*.h artifacts\include\

    - name: Prepare artifacts (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        mkdir artifacts
        # Find and copy the static library
        staticLib=$(find build/ -name "*soundio_static*.a" | head -1)
        if [ -n "$staticLib" ]; then
          cp "$staticLib" "artifacts/libsoundio_static_${{ matrix.arch }}_mingw.a"
        else
          echo "Static library not found!"
          find build/ -name "*.a"
          exit 1
        fi
        # Copy headers
        mkdir artifacts/include
        cp soundio/*.h artifacts/include/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-${{ matrix.compiler }}-${{ matrix.arch }}
        path: artifacts/

  combine-artifacts:
    needs: build-windows-static
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find all-artifacts -type f -name "*" | sort

    - name: Combine artifacts
      run: |
        mkdir -p combined/lib
        mkdir -p combined/include
        
        # Copy all static libraries
        find all-artifacts -name "*.lib" -exec cp {} combined/lib/ \; 2>/dev/null || true
        find all-artifacts -name "*.a" -exec cp {} combined/lib/ \; 2>/dev/null || true
        
        # Copy headers (from any artifact, they're the same)
        find all-artifacts -name "*.h" -exec cp {} combined/include/ \; 2>/dev/null || true
        
        # List what we have
        echo "Combined artifacts:"
        find combined -type f | sort
        
        # Create comprehensive documentation
        cat > combined/README.md << 'EOF'
        # libsoundio Static Libraries for Windows
        
        This package contains static libraries for libsoundio compiled for Windows.
        
        ## Files included:
        - `lib/libsoundio_static_x64_msvc.lib` - 64-bit MSVC static library
        - `lib/libsoundio_static_x86_msvc.lib` - 32-bit MSVC static library  
        - `lib/libsoundio_static_x64_mingw.a` - 64-bit MinGW static library
        - `lib/libsoundio_static_x86_mingw.a` - 32-bit MinGW static library
        - `include/` - Header files (soundio.h, endian.h)
        
        ## Critical Usage Requirements:
        
        ### 1. Define SOUNDIO_STATIC_LIBRARY
        **THIS IS MANDATORY** - You must define `SOUNDIO_STATIC_LIBRARY` when compiling your application:
        
        ```bash
        # With MSVC (requires /std:c11 or newer)
        cl /std:c11 /DSOUNDIO_STATIC_LIBRARY your_app.c libsoundio_static_x64_msvc.lib
        
        # With MinGW/GCC
        gcc -std=c11 -DSOUNDIO_STATIC_LIBRARY your_app.c -L. -lsoundio_static_x64_mingw
        ```
        
        ### 2. C11 Standard Required
        libsoundio uses C11 atomics, so you must compile with C11 or later standard.
        
        ### 3. CMake Integration:
        ```cmake
        # Set C11 standard
        set(CMAKE_C_STANDARD 11)
        set(CMAKE_C_STANDARD_REQUIRED ON)
        
        # Add headers
        target_include_directories(your_app PRIVATE path/to/libsoundio/include)
        
        # REQUIRED: Define static library usage
        target_compile_definitions(your_app PRIVATE SOUNDIO_STATIC_LIBRARY)
        
        # Link appropriate library
        if(MSVC)
            target_link_libraries(your_app path/to/libsoundio_static_x64_msvc.lib)
        else()
            target_link_libraries(your_app path/to/libsoundio_static_x64_mingw.a)
        endif()
        ```
        
        ### 4. No External Dependencies
        - libsoundio uses WASAPI backend on Windows (built into Windows)
        - No additional audio libraries required
        - Choose correct architecture (x86/x64) matching your application
        
        ### 5. Troubleshooting
        - If you get "C atomics require C11 or later": Add `/std:c11` (MSVC) or `-std=c11` (GCC)
        - If you get "undefined symbol: __imp_soundio_*": Define SOUNDIO_STATIC_LIBRARY
        
        ## libsoundio Information:
        - Version: 2.0.0
        - License: MIT
        - Repository: https://github.com/andrewrk/libsoundio
        - Audio Backend: WASAPI (Windows Audio Session API)
        - Requires: C11 standard or later
        EOF

        # Create a simple example with C11
        cat > combined/example.c << 'EOF'
        // Simple libsoundio example
        // Compile with: cl /std:c11 /DSOUNDIO_STATIC_LIBRARY example.c libsoundio_static_x64_msvc.lib
        
        #include "soundio.h"
        #include <stdio.h>
        
        int main() {
            struct SoundIo *soundio = soundio_create();
            if (!soundio) {
                printf("Failed to create SoundIo context\n");
                return 1;
            }
            
            int err = soundio_connect(soundio);
            if (err) {
                printf("Failed to connect: %s\n", soundio_strerror(err));
                soundio_destroy(soundio);
                return 1;
            }
            
            soundio_flush_events(soundio);
            
            printf("Successfully initialized libsoundio!\n");
            printf("Output device count: %d\n", soundio_output_device_count(soundio));
            printf("Input device count: %d\n", soundio_input_device_count(soundio));
            
            soundio_destroy(soundio);
            return 0;
        }
        EOF

    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-windows-all
        path: combined/
