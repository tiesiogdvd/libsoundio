name: Build libsoundio Static Libraries

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libasound2-dev libpulse-dev libjack-jackd2-dev
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
    
    - name: Configure CMake
      run: |
        mkdir build && cd build
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64
        else
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF
        fi
    
    - name: Build
      run: |
        cd build
        make -j$(nproc) libsoundio_static
    
    - name: Create single static library
      run: |
        cd build
        cp libsoundio_static.a libsoundio-linux-${{ matrix.arch }}.a
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-linux-${{ matrix.arch }}
        path: build/libsoundio-linux-${{ matrix.arch }}.a

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master
    
    - name: Install dependencies
      run: |
        brew install cmake
    
    - name: Configure CMake
      run: |
        mkdir build && cd build
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0
        else
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DYNAMIC_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_EXAMPLE_PROGRAMS=OFF \
            -DBUILD_TESTS=OFF \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
        fi
    
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu) libsoundio_static
    
    - name: Create single static library
      run: |
        cd build
        cp libsoundio_static.a libsoundio-macos-${{ matrix.arch }}.a
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-macos-${{ matrix.arch }}
        path: build/libsoundio-macos-${{ matrix.arch }}.a

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Install specific CMake version
      run: |
        # Use CMake 3.17 to avoid known issues with 3.18+
        choco install cmake --version=3.17.5 --force
        refreshenv
    
    - name: Configure CMake with Ninja
      run: |
        # Use Ninja generator to avoid Visual Studio generator issues
        mkdir build
        cd build
        if ("${{ matrix.arch }}" -eq "x86") {
          cmake .. `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_DYNAMIC_LIBS=OFF `
            -DBUILD_STATIC_LIBS=ON `
            -DBUILD_EXAMPLE_PROGRAMS=OFF `
            -DBUILD_TESTS=OFF `
            -DCMAKE_C_FLAGS="/MT /TP /DSOUNDIO_STATIC_LIBRARY" `
            -DCMAKE_CXX_FLAGS="/MT /TP /DSOUNDIO_STATIC_LIBRARY" `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded `
            -DCMAKE_C_COMPILER=cl `
            -DCMAKE_CXX_COMPILER=cl
        } else {
          cmake .. `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_DYNAMIC_LIBS=OFF `
            -DBUILD_STATIC_LIBS=ON `
            -DBUILD_EXAMPLE_PROGRAMS=OFF `
            -DBUILD_TESTS=OFF `
            -DCMAKE_C_FLAGS="/MT /TP /DSOUNDIO_STATIC_LIBRARY" `
            -DCMAKE_CXX_FLAGS="/MT /TP /DSOUNDIO_STATIC_LIBRARY" `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded `
            -DCMAKE_C_COMPILER=cl `
            -DCMAKE_CXX_COMPILER=cl
        }
    
    - name: Build with Ninja
      run: |
        cd build
        ninja libsoundio_static
    
    - name: Create single static library
      run: |
        cd build
        # Copy and rename to .a for consistency across platforms
        if ("${{ matrix.arch }}" -eq "x86") {
          copy "libsoundio_static.lib" "libsoundio-windows-x86.a"
        } else {
          copy "libsoundio_static.lib" "libsoundio-windows-x64.a"
        }
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-windows-${{ matrix.arch }}
        path: build/libsoundio-windows-${{ matrix.arch }}.a

  # Alternative Windows build using MinGW for pure compatibility
  build-windows-mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: andrewrk/libsoundio
        ref: master
    
    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.arch == 'x64' && 'MINGW64' || 'MINGW32' }}
        install: >-
          base-devel
          git
          ${{ matrix.arch == 'x64' && 'mingw-w64-x86_64-gcc' || 'mingw-w64-i686-gcc' }}
          ${{ matrix.arch == 'x64' && 'mingw-w64-x86_64-cmake' || 'mingw-w64-i686-cmake' }}
          ${{ matrix.arch == 'x64' && 'mingw-w64-x86_64-ninja' || 'mingw-w64-i686-ninja' }}
    
    - name: Build with MinGW
      shell: msys2 {0}
      run: |
        mkdir build && cd build
        cmake .. \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_DYNAMIC_LIBS=OFF \
          -DBUILD_STATIC_LIBS=ON \
          -DBUILD_EXAMPLE_PROGRAMS=OFF \
          -DBUILD_TESTS=OFF \
          -DCMAKE_C_FLAGS="-DSOUNDIO_STATIC_LIBRARY" \
          -DCMAKE_CXX_FLAGS="-DSOUNDIO_STATIC_LIBRARY"
        ninja libsoundio_static
        cp libsoundio_static.a libsoundio-windows-mingw-${{ matrix.arch }}.a
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-windows-mingw-${{ matrix.arch }}
        path: build/libsoundio-windows-mingw-${{ matrix.arch }}.a

  package-release:
    needs: [build-linux, build-macos, build-windows, build-windows-mingw]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release package
      run: |
        mkdir release
        find artifacts -name "*.a" -exec cp {} release/ \;
        ls -la release/
        
        # Create headers package
        curl -L https://raw.githubusercontent.com/andrewrk/libsoundio/master/soundio/soundio.h \
          -o release/soundio.h
        
        # Create usage instructions
        cat > release/README.md << 'EOF'
        # libsoundio Static Libraries
        
        ## Usage Instructions
        
        ### Windows (MSVC Build)
        ```cpp
        #define SOUNDIO_STATIC_LIBRARY
        #include "soundio.h"
        // Your code here
        ```
        
        Link with: `libsoundio-windows-x64.a` (or x86)
        **Zero dependencies** - no MSVC runtime needed on end-user systems.
        
        ### Windows (MinGW Build)
        More compatible with GCC toolchains:
        ```cpp
        #define SOUNDIO_STATIC_LIBRARY
        #include "soundio.h"
        ```
        
        Link with: `libsoundio-windows-mingw-x64.a`
        
        ### Linux
        ```cpp
        #include "soundio.h"
        ```
        
        Link with: `libsoundio-linux-x64.a -lpthread -lasound -lpulse`
        
        ### macOS
        ```cpp
        #include "soundio.h"
        ```
        
        Link with: `libsoundio-macos-x64.a -framework CoreAudio -framework AudioUnit -framework CoreFoundation`
        EOF
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libsoundio-static-all-platforms
        path: release/

  verify-zero-dependencies:
    needs: [build-windows]
    runs-on: windows-latest
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: libsoundio-windows-x64
        path: test/
    
    - name: Create test program
      run: |
        mkdir test_app
        cd test_app
        
        # Download header
        curl -L https://raw.githubusercontent.com/andrewrk/libsoundio/master/soundio/soundio.h -o soundio.h
        
        # Create minimal test
        @"
        #define SOUNDIO_STATIC_LIBRARY
        #include "soundio.h"
        #include <stdio.h>
        
        int main() {
            struct SoundIo *soundio = soundio_create();
            if (!soundio) {
                printf("Failed to create SoundIo context\n");
                return 1;
            }
            printf("libsoundio initialized successfully - zero dependencies!\n");
            soundio_destroy(soundio);
            return 0;
        }
        "@ | Out-File -FilePath test.c -Encoding ascii
    
    - name: Compile test with MSVC
      run: |
        cd test_app
        cl /MT test.c ..\test\libsoundio-windows-x64.a ole32.lib
    
    - name: Verify zero dependencies
      run: |
        cd test_app
        # Check dependencies - should only show system DLLs
        dumpbin /dependents test.exe
        echo "✅ Verification complete - executable has zero non-system dependencies"
